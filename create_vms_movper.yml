---
- name: Clone Multiple VMs from Template HCIMOVPER
  hosts: all
  gather_facts: false
  vars:
    # VARIABLES PRINCIPALES - SE DEFINEN EN AWX
    vcenter_host: "{{ vcenter_host }}"
    vcenter_username: "{{ vcenter_username }}"
    vcenter_password: "{{ vcenter_password }}"
    datacenter: "{{ datacenter }}"
    template_name: "{{ template_name }}"
    vm_name_prefix: "{{ vm_name_prefix }}"
    starting_number: "{{ starting_number | int }}"
    vm_count: "{{ vm_count | int }}"
    folder: "{{ folder }}"
    
    # VARIABLES DE INFRAESTRUCTURA - SE DEFINEN EN AWX
    cluster: "{{ cluster }}"
    datastore: "{{ datastore }}"
    network: "{{ network }}"
    domain: "{{ domain }}"

  tasks:
    - name: Generate empty VM list
      set_fact:
        vms: []

    - name: Build VM names list
      set_fact:
        vms: "{{ vms + [vm_name_prefix + '-' + (starting_number + item)|string] }}"
      loop: "{{ range(0, vm_count) | list }}"

    - name: Show VMs to be created
      debug:
        msg: "VMs to create: {{ vms }}"

    - name: Show configuration summary
      debug:
        msg: |
          📋 CONFIGURACIÓN A USAR:
          - vCenter: {{ vcenter_host }}
          - Datacenter: {{ datacenter }}
          - Template: {{ template_name }}
          - Folder: {{ folder }}
          - Cluster: {{ cluster }}
          - Datastore: {{ datastore }}
          - Network: {{ network }}
          - Domain: {{ domain }}
          - VM Name Pattern: {{ vm_name_prefix }}-XXX
          - Starting Number: {{ starting_number }}
          - VM Count: {{ vm_count }}
          - Total VMs: {{ vms | length }}

    - name: Validate vCenter connection using vmware_vm_info
      vmware_vm_info:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
      register: vcenter_info
      delegate_to: localhost
      ignore_errors: yes

    - name: Check vCenter connection result
      fail:
        msg: "❌ No se pudo conectar a vCenter {{ vcenter_host }}. Verifica credenciales y conectividad. Error: {{ vcenter_info.msg | default('Unknown error') }}"
      when: vcenter_info.failed

    - name: Confirm vCenter connection successful
      debug:
        msg: "✅ Conexión a vCenter {{ vcenter_host }} exitosa"

    - name: Check if template exists
      vmware_guest_info:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        name: "{{ template_name }}"
      register: template_info
      delegate_to: localhost

    - name: Fail if template not found
      fail:
        msg: "❌ Template '{{ template_name }}' no encontrado en datacenter '{{ datacenter }}'. Verifica el nombre."
      when: template_info.instance is not defined

    - name: Confirm template found
      debug:
        msg: "✅ Template encontrado: {{ template_name }} ({{ template_info.instance.hw_name }})"

    - name: Clone VMs from template
      vmware_guest:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        folder: "{{ folder }}"
        name: "{{ item }}"
        template: "{{ template_name }}"
        cluster: "{{ cluster }}"
        datastore: "{{ datastore }}"
        networks:
          - name: "{{ network }}"
            device_type: "vmxnet3"
        customization:
          hostname: "{{ item }}"
          domain: "{{ domain }}"
        state: poweredoff
      loop: "{{ vms }}"
      delegate_to: localhost
      register: vm_creation_results
      async: 3600
      poll: 0

    - name: Wait for VM creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ vm_creation_results.results }}"
      loop_control:
        label: "{{ item.item }}"
      register: async_results
      until: async_results.finished
      retries: 30
      delay: 60
      delegate_to: localhost
      when: vm_creation_results.results is defined

    - name: Verify VMs were created successfully
      vmware_guest_info:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        name: "{{ item }}"
      loop: "{{ vms }}"
      delegate_to: localhost
      register: vm_verification

    - name: Show individual VM creation status
      debug:
        msg: "VM {{ item.item }} - Estado: {% if item.instance is defined %}✅ CREADA ({{ item.instance.power_state }}){% else %}❌ FALLÓ{% endif %}"
      loop: "{{ vm_verification.results }}"

    - name: Show final summary
      debug:
        msg: |
          🎯 RESUMEN FINAL DE CREACIÓN DE VMs:
          ====================================
          {% set success_count = vm_verification.results | selectattr('instance', 'defined') | list | count %}
          {% set failed_count = vm_verification.results | rejectattr('instance', 'defined') | list | count %}
          
          ✅ VMs EXITOSAS: {{ success_count }}
          {% if failed_count > 0 %}❌ VMs FALLIDAS: {{ failed_count }}{% endif %}
          
          📋 DETALLE:
          {% for result in vm_verification.results %}
          - {{ result.item }}: {% if result.instance is defined %}✅ EXITOSA{% else %}❌ FALLIDA{% endif %}
          {% endfor %}
