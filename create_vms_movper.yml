---
- name: Clone VMs from Template HCIMOVPER
  hosts: all
  gather_facts: false
  vars:
    vcenter_host: "pesudvsisvc02.ktinkiy.local"
    template_name: "TempDeb12Hard"
    policy_name: "Windows11-HighPerformance-RAID0"
    vm_name_prefix: "HCIMOVPER"
    starting_number: 101
    vm_count: 3
    datacenter: "VxRail-Datacenter"
    cluster: "VxRail-Virtual-SAN"
    datastore: "VxRail-Virtual-SAN-Datastore-10304fd9-470e-40e9-8bca-a81d66b0843e"
    network: "Movistar Peru 122"

  tasks:
    - name: Generate list of VMs to create
      set_fact:
        vms: "{{ [] }}"

    - name: Build VM names list
      set_fact:
        vms: "{{ vms + [vm_name_prefix + '-' + (starting_number + item | string)] }}"
      loop: "{{ range(0, vm_count) | list }}"

    - name: Show VMs to be created
      debug:
        msg: "VMs to create: {{ vms }}"

    - name: Validate vCenter connection
      vmware_guest_info:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
      register: vcenter_info

    - name: Check if template exists
      vmware_guest_info:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        name: "{{ template_name }}"
      register: template_info

    - name: Clone VMs from template
      vmware_guest:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        name: "{{ item }}"
        template: "{{ template_name }}"
        cluster: "{{ cluster }}"
        datastore: "{{ datastore }}"
        networks:
          - name: "{{ network }}"
            device_type: "vmxnet3"
        customization:
          hostname: "{{ item }}"
          domain: "ktinkiy.local"
        state: poweredon
      loop: "{{ vms }}"
      delegate_to: localhost
      register: vm_creation_results

    - name: Apply storage policy to VMs
      vmware_vm_storage_policy:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        cluster: "{{ cluster }}"
        vm_name: "{{ item.item }}"
        storage_policy_name: "{{ policy_name }}"
      loop: "{{ vm_creation_results.results }}"
      when: item.changed
      delegate_to: localhost

    - name: Verify VMs were created successfully
      vmware_guest_info:
        hostname: "{{ vcenter_host }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ datacenter }}"
        name: "{{ item }}"
      loop: "{{ vms }}"
      delegate_to: localhost
      register: vm_verification

    - name: Show final summary
      debug:
        msg: |
          âœ… VMs CREATED SUCCESSFULLY:
          {% for vm in vms %}
          - {{ vm }}
          {% endfor %}
          
          Configuration used:
          - vCenter: {{ vcenter_host }}
          - Template: {{ template_name }}
          - Policy: {{ policy_name }}
          - Network: {{ network }}
          - Starting number: {{ starting_number }}
          - VM count: {{ vm_count }}
